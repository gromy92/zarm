(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{300:function(n,e,a){"use strict";a.r(e);var t=a(6),r=a.n(t),s=a(5),o=a.n(s),c=a(2),i=a.n(c),d=a(4),l=a.n(d),u=function(n){function e(){var n,t,s,c;o()(this,e);for(var d=arguments.length,l=Array(d),u=0;u<d;u++)l[u]=arguments[u];return t=s=i()(this,(n=e.__proto__||r()(e)).call.apply(n,[this].concat(l))),s.document=function(){return{document:a(485),className:"message-page"}},c=t,i()(s,c)}return l()(e,n),e}(a(464).a);e.default=u},460:function(n,e,a){},464:function(n,e,a){"use strict";var t=a(6),r=a.n(t),s=a(5),o=a.n(s),c=a(7),i=a.n(c),d=a(2),l=a.n(d),u=a(4),g=a.n(u),m=a(0),p=a.n(m),h=a(461),f=a.n(h),v=a(463),M=a.n(v),b=(a(462),a(460),function(n){function e(){return o()(this,e),l()(this,(e.__proto__||r()(e)).apply(this,arguments))}return g()(e,n),i()(e,[{key:"render",value:function(){var n=this.document(localStorage.getItem("LANGUAGE")||"zh-CN"),e=n.document,a=n.className;if("string"==typeof e){var t=new f.a.Renderer;t.table=function(n,e){return'<div class="grid-container"><table class="grid"><thead>'+n+"</thead><tbody>"+e+"</tbody></table></div>"},t.code=function(n,e){return'<pre><code class="hljs '+e+'">'+(!(!e||!M.a.getLanguage(e))?M.a.highlight(e,n).value:n)+"</code></pre>"};var r=f()(e,{renderer:t});return p.a.createElement("div",{className:a,dangerouslySetInnerHTML:{__html:r}})}return p.a.createElement("span",null)}}]),e}(m.Component));e.a=b},485:function(n,e){n.exports="# 消息 Message\n\n\n\n## 基本用法\n```jsx\nimport { Message, Icon } from 'zarm';\n\nclass Demo extends React.Component {\n  render() {\n    return (\n      <div>\n        <Message>普通</Message>\n        <Message theme=\"danger\">自定义主题</Message>\n        <Message icon={<Icon type=\"wrong-round\" />}>自定义图标</Message>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n## 可操作\n```jsx\nimport { Message } from 'zarm';\n\nclass Demo extends React.Component {\n  render() {\n    return (\n      <div>\n        <Message hasArrow onClick={() => alert('click this message!')}>链接样式的</Message>\n        <Message closable>可关闭的</Message>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n## API\n\n| 属性 | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :--- |\n| theme | string | 'primary' | 主题，可选值 `default`、`primary`、`success`、`warning`、`danger` |\n| size | string | 'md' | 设置大小，可选值为 `md`、`lg` |\n| icon | ReactNode | - | 设置图标 |\n| closable | boolean | false | 是否显示关闭按钮 |\n| hasArrow | boolean | false | 是否显示箭头 |\n| onClick | () => void | - | 点击后触发的回调函数 |\n"}}]);