(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{284:function(n,e,t){"use strict";t.r(e);var o=t(6),r=t.n(o),a=t(5),i=t.n(a),s=t(2),l=t.n(s),c=t(4),d=t.n(c),u=function(n){function e(){var n,o,a,s;i()(this,e);for(var c=arguments.length,d=Array(c),u=0;u<c;u++)d[u]=arguments[u];return o=a=l()(this,(n=e.__proto__||r()(e)).call.apply(n,[this].concat(d))),a.document=function(){return{document:t(470),className:"toast-page"}},s=o,l()(a,s)}return d()(e,n),e}(t(465).a);e.default=u},461:function(n,e,t){},465:function(n,e,t){"use strict";var o=t(6),r=t.n(o),a=t(5),i=t.n(a),s=t(7),l=t.n(s),c=t(2),d=t.n(c),u=t(4),m=t.n(u),p=t(0),h=t.n(p),v=t(462),f=t.n(v),C=t(464),g=t.n(C),b=(t(463),t(461),function(n){function e(){return i()(this,e),d()(this,(e.__proto__||r()(e)).apply(this,arguments))}return m()(e,n),l()(e,[{key:"render",value:function(){var n=this.document(localStorage.getItem("LANGUAGE")||"zh-CN"),e=n.document,t=n.className;if("string"==typeof e){var o=new f.a.Renderer;o.table=function(n,e){return'<div class="grid-container"><table class="grid"><thead>'+n+"</thead><tbody>"+e+"</tbody></table></div>"},o.code=function(n,e){return'<pre><code class="hljs '+e+'">'+(!(!e||!g.a.getLanguage(e))?g.a.highlight(e,n).value:n)+"</code></pre>"};var r=f()(e,{renderer:o});return h.a.createElement("div",{className:t,dangerouslySetInnerHTML:{__html:r}})}return h.a.createElement("span",null)}}]),e}(p.Component));e.a=b},470:function(n,e){n.exports='# 轻提示 Toast\n\n\n\n## 基本用法\n```jsx\nimport { Toast, Cell, Button, Icon } from \'zarm\';\n\nclass Demo extends React.Component {\n  render() {\n    return (\n      <div>\n        <Cell\n          description={\n            <Button\n              size="xs"\n              onClick={() => {\n                Toast.show(\'默认3秒自动关闭\');\n              }}\n            >\n              开启\n            </Button>\n          }\n        >\n          普通\n        </Cell>\n\n        <Cell\n          description={\n            <Button\n              size="xs"\n              onClick={() => {\n                Toast.show(\'指定10秒后自动关闭\', 10000);\n              }}\n            >\n              开启\n            </Button>\n          }\n        >\n          指定停留时间\n        </Cell>\n\n        <Cell\n          description={\n            <Button\n              size="xs"\n              onClick={() => {\n                Toast.show(\n                  <div className="box">\n                    <Icon className="box-icon" type="right-round-fill" />\n                    <div className="box-text">\n                      预约成功\n                    </div>\n                  </div>\n                );\n              }}\n            >\n              开启\n            </Button>\n          }\n        >\n          自定义内容\n        </Cell>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n## 加载中\n```jsx\nimport { Loading, Cell, Button } from \'zarm\';\n\nclass Demo extends React.Component {\n  render() {\n    return (\n      <div>\n        <Cell\n          description={\n            <Button\n              size="xs"\n              onClick={() => {\n                Loading.show();\n                setTimeout(()=>{\n                  Loading.hide();\n                }, 1100);\n              }}\n            >\n              开启\n            </Button>\n          }\n        >\n          Loading\n        </Cell>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n## API\n\n| 属性 | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :--- |\n| visible | boolean | false | 是否显示 |\n| stayTime | number | 3000 | 自动关闭前停留的时间（单位：毫秒） |\n| onClose | () => void | - | 关闭时触发的回调函数 |\n| onMaskClick | () => void | - | 点击遮罩层时触发的回调函数 |\n'}}]);